const express = require('express');
const cors = require('cors');
const fs = require('fs').promises;
const path = require('path');
const simpleGit = require('simple-git');

const app = express();
const PORT = process.env.PORT || 3001;
const DATA_FILE = path.join(__dirname, 'src', 'data', 'menu.json');
const git = simpleGit();

// Middleware
app.use(cors());
app.use(express.json());

// ะคัะฝะบัะธั ะดะปั ัะพััะฐะฝะตะฝะธั ะดะฐะฝะฝัั ะธ ะบะพะผะผะธัะฐ ะฒ Git
async function saveDataAndCommit(data, commitMessage) {
  try {
    // ะกะพััะฐะฝัะตะผ ะดะฐะฝะฝัะต ะฒ ัะฐะนะป
    await fs.writeFile(DATA_FILE, JSON.stringify(data, null, 2), 'utf8');
    
    // ะะพะฑะฐะฒะปัะตะผ ัะฐะนะป ะฒ Git
    await git.add(DATA_FILE);
    
    // ะะพะผะผะธัะธะผ ะธะทะผะตะฝะตะฝะธั
    await git.commit(commitMessage);
    
    // ะััะธะผ ะฒ GitHub
    await git.push('origin', 'main');
    
    console.log(`โ ะะทะผะตะฝะตะฝะธั ัะพััะฐะฝะตะฝั ะธ ะพัะฟัะฐะฒะปะตะฝั ะฒ GitHub: ${commitMessage}`);
    return true;
  } catch (error) {
    console.error('โ ะัะธะฑะบะฐ ะฟัะธ ัะพััะฐะฝะตะฝะธะธ ะฒ Git:', error);
    return false;
  }
}

// ะะฐะณััะถะฐะตะผ ะดะฐะฝะฝัะต ะธะท ัะฐะนะปะฐ
async function loadData() {
  try {
    const data = await fs.readFile(DATA_FILE, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('ะัะธะฑะบะฐ ะฟัะธ ะทะฐะณััะทะบะต ะดะฐะฝะฝัั:', error);
    throw error;
  }
}

// API Routes

// GET /api/menu - ะฟะพะปััะธัั ะดะฐะฝะฝัะต ะผะตะฝั
app.get('/api/menu', async (req, res) => {
  try {
    const data = await loadData();
    res.json(data);
  } catch (error) {
    console.error('ะัะธะฑะบะฐ ะฟัะธ ะทะฐะณััะทะบะต ะดะฐะฝะฝัั:', error);
    res.status(500).json({ error: 'ะัะธะฑะบะฐ ัะตัะฒะตัะฐ' });
  }
});

// PUT /api/menu - ะพะฑะฝะพะฒะธัั ะดะฐะฝะฝัะต ะผะตะฝั
app.put('/api/menu', async (req, res) => {
  try {
    const newData = req.body;
    const { action, itemName } = req.query; // ะะพะปััะฐะตะผ ะธะฝัะพัะผะฐัะธั ะพ ะดะตะนััะฒะธะธ
    
    // ะคะพัะผะธััะตะผ ัะพะพะฑัะตะฝะธะต ะบะพะผะผะธัะฐ
    let commitMessage = 'ะะฑะฝะพะฒะปะตะฝะธะต ะผะตะฝั';
    if (action && itemName) {
      switch (action) {
        case 'add':
          commitMessage = `ะะพะฑะฐะฒะปะตะฝะพ: ${itemName}`;
          break;
        case 'update':
          commitMessage = `ะะฑะฝะพะฒะปะตะฝะพ: ${itemName}`;
          break;
        case 'delete':
          commitMessage = `ะฃะดะฐะปะตะฝะพ: ${itemName}`;
          break;
        case 'reset':
          commitMessage = 'ะกะฑัะพั ะผะตะฝั ะบ ะธััะพะดะฝะพะผั ัะพััะพัะฝะธั';
          break;
      }
    }
    
    // ะกะพััะฐะฝัะตะผ ะดะฐะฝะฝัะต ะธ ะบะพะผะผะธัะธะผ ะฒ Git
    const success = await saveDataAndCommit(newData, commitMessage);
    
    if (success) {
      res.json({ 
        success: true, 
        message: 'ะะฐะฝะฝัะต ััะฟะตัะฝะพ ัะพััะฐะฝะตะฝั ะธ ะพัะฟัะฐะฒะปะตะฝั ะฒ GitHub',
        commitMessage 
      });
    } else {
      res.status(500).json({ error: 'ะัะธะฑะบะฐ ะฟัะธ ัะพััะฐะฝะตะฝะธะธ ะฒ Git' });
    }
  } catch (error) {
    console.error('ะัะธะฑะบะฐ ะฟัะธ ัะพััะฐะฝะตะฝะธะธ ะดะฐะฝะฝัั:', error);
    res.status(500).json({ error: 'ะัะธะฑะบะฐ ัะตัะฒะตัะฐ' });
  }
});

// GET /api/menu/reset - ัะฑัะพัะธัั ะบ ะธััะพะดะฝัะผ ะดะฐะฝะฝัะผ
app.get('/api/menu/reset', async (req, res) => {
  try {
    const initialData = {
      restaurant: {
        name: "COFFEE LIKE",
        description: "ะะพะฑัะพ ะฟะพะถะฐะปะพะฒะฐัั ะฒ ะฝะฐัั ัััะฝัั ะบะพัะตะนะฝั! ะั ะฟัะตะดะปะฐะณะฐะตะผ ัะฒะตะถะธะน ะบะพัะต, ะฒะบััะฝัะต ะฑะปัะดะฐ ะธ ะฟัะธััะฝัั ะฐัะผะพััะตัั."
      },
      categories: [
        {
          id: "drinks",
          name: "ะะฐะฟะธัะบะธ",
          icon: "โ",
          subCategories: [
            {
              id: "classic-drinks",
              name: "ะะปะฐััะธัะตัะบะธะต ะฝะฐะฟะธัะบะธ",
              categoryId: "drinks",
              items: [
                {
                  id: "americano",
                  name: "ะะผะตัะธะบะฐะฝะพ",
                  description: "ะะปะฐััะธัะตัะบะธะน ััะฟัะตััะพ ั ะณะพัััะตะน ะฒะพะดะพะน",
                  price: 150,
                  category: "drinks",
                  subCategory: "classic-drinks",
                  available: true
                },
                {
                  id: "cappuccino",
                  name: "ะะฐะฟััะธะฝะพ",
                  description: "ะญัะฟัะตััะพ ั ะผะพะปะพัะฝะพะน ะฟะตะฝะบะพะน",
                  price: 180,
                  category: "drinks",
                  subCategory: "classic-drinks",
                  available: true
                }
              ]
            }
          ]
        }
      ]
    };
    
    const success = await saveDataAndCommit(initialData, 'ะกะฑัะพั ะผะตะฝั ะบ ะธััะพะดะฝะพะผั ัะพััะพัะฝะธั');
    
    if (success) {
      res.json({ 
        success: true, 
        message: 'ะะตะฝั ัะฑัะพัะตะฝะพ ะบ ะธััะพะดะฝะพะผั ัะพััะพัะฝะธั ะธ ัะพััะฐะฝะตะฝะพ ะฒ GitHub' 
      });
    } else {
      res.status(500).json({ error: 'ะัะธะฑะบะฐ ะฟัะธ ัะฑัะพัะต ะดะฐะฝะฝัั' });
    }
  } catch (error) {
    console.error('ะัะธะฑะบะฐ ะฟัะธ ัะฑัะพัะต ะดะฐะฝะฝัั:', error);
    res.status(500).json({ error: 'ะัะธะฑะบะฐ ัะตัะฒะตัะฐ' });
  }
});

// ะะฐะฟััะบ ัะตัะฒะตัะฐ
app.listen(PORT, () => {
  console.log(`๐ API ัะตัะฒะตั ะทะฐะฟััะตะฝ ะฝะฐ ะฟะพััั ${PORT}`);
  console.log(`๐ ะะฐะฝะฝัะต ัะพััะฐะฝััััั ะฒ: ${DATA_FILE}`);
  console.log(`๐ API ะดะพัััะฟะตะฝ ะฟะพ ะฐะดัะตัั: http://localhost:${PORT}/api/menu`);
  console.log(`๐พ ะะทะผะตะฝะตะฝะธั ะฐะฒัะพะผะฐัะธัะตัะบะธ ัะพััะฐะฝััััั ะฒ GitHub`);
});
